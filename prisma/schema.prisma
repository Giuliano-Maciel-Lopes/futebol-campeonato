generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------------------
model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  name      String
  password  String
  role      Role     @default(JOGADOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  

  // Cada usuário pode ter no máximo 1 cartinha
  player          Player?
  // Convites enviados e recebidos

}

// --------------------------------------

model Team {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isActive  Boolean  @default(true)

  // Capitão do time
  captainId String @unique @db.Uuid
  captain   Player @relation("TeamCaptain", fields: [captainId], references: [id])

  // Jogadores do time
  players Player[] @relation("TeamPlayers")

  groupId String? @db.Uuid
  group   Group?  @relation(fields: [groupId], references: [id])

  team1Matches Match[] @relation("Team1Matches")
  team2Matches Match[] @relation("Team2Matches")

  invites Invite[] @relation("TeamInvites")
}

// --------------------------------------
model Player {
  id        String     @id @default(uuid()) @db.Uuid
  nameCart  String     @unique
  position  Position
  number    Int
  photoUrl  String?
  isActive  Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  userId    String     @unique @db.Uuid
  role      PlayerRole @default(JOGADOR)

  goals   Int @default(0)
  assists Int @default(0)

  user User @relation(fields: [userId], references: [id])

  // Relação com Team como jogador
  team   Team?   @relation("TeamPlayers", fields: [teamId], references: [id])
  teamId String? @db.Uuid

  // Relação com Team como capitão
  captainOf Team? @relation("TeamCaptain")

  events MatchEvent[]

  sentInvites     Invite[] @relation("SentInvites")
  receivedInvites Invite[] @relation("ReceivedInvites")
}

//  --------------------------------------
model Group {
  id        String   @id @default(uuid()) @db.Uuid
  name      String // grupo A B C vai ser por sedds 180jogadores
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teams Team[]
}

// ---------------------------------------
model Match {
  id String @id @default(uuid()) @db.Uuid

  stage Stage // Fase do campeonato: GROUP, , SEMI, FINAL
   round Int    @default(autoincrement()) 

  team1Id String @db.Uuid
  team2Id String @db.Uuid
  team1   Team   @relation("Team1Matches", fields: [team1Id], references: [id])
  team2   Team   @relation("Team2Matches", fields: [team2Id], references: [id])

  team1Score Int @default(0)
  team2Score Int @default(0)

  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events MatchEvent[]
}

// -------------------------------------
model MatchEvent {
  id String @id @default(uuid()) @db.Uuid

  matchId  String    @db.Uuid
  playerId String    @db.Uuid
  type     EventType

  match  Match  @relation(fields: [matchId], references: [id])
  player Player @relation(fields: [playerId], references: [id])
}

// --------------------------------------
model Invite {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Quem enviou o convite 
  senderId String @db.Uuid
  sender  Player    @relation("SentInvites", fields: [senderId], references: [id])

  // Quem vai receber 
receiverId String @db.Uuid
receiver   Player @relation("ReceivedInvites", fields: [receiverId], references: [id])

  // Para qual time é o convite
  teamId String @db.Uuid
  team   Team   @relation("TeamInvites", fields: [teamId], references: [id])

  // Status do pedido
  status InviteStatus @default(PENDING)
}

enum InviteStatus {
  PENDING
  ACCEPTED

}

enum Role {
  ADMIN
  JOGADOR
}

enum Position {
  GOLEIRO
  DEFENSOR
  MEIOCAMPO
  ATACANTE
}

enum Stage {
  GROUP
  QUARTAS
  SEMI
  FINAL
}

enum EventType {
  GOAL
  ASSIST
}

enum PlayerRole {
  JOGADOR
  CAPITAO
}
