generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --------------------------------------
model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  name      String
  password  String
  role      Role     @default(JOGADOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Cada usuário pode ser capitão de no máximo 1 time
  captainOf Team?

  // Cada usuário pode ter no máximo 1 cartinha
  player Player?
}

// --------------------------------------

model Team {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  captain   User   @relation(fields: [captainId], references: [id])
  captainId String @unique @db.Uuid

  // Jogadores do time
  players Player[]

  // Relacionamento com grupos
  groupId String? @db.Uuid
  group   Group?  @relation(fields: [groupId], references: [id])

  // Relacionamento com partidas
  team1Matches Match[] @relation("Team1Matches")
  team2Matches Match[] @relation("Team2Matches")
}

// --------------------------------------
model Player {
  id        String   @id @default(uuid()) @db.Uuid
  nameCart  String   @unique
  position  Position
  number    Int
  photoUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique @db.Uuid

  goals   Int @default(0)
  assists Int @default(0)

  // Relação com o usuário
  user User @relation(fields: [userId], references: [id])

  // Relação com Team
  team   Team?   @relation(fields: [teamId], references: [id])
  teamId String? @db.Uuid

  // Eventos de partidas (gol/assistência)
  events MatchEvent[]
}

//  --------------------------------------
model Group {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   // Ex: "Grupo A"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  teams Team[]
}

// ---------------------------------------
model Match {
  id        String   @id @default(uuid()) @db.Uuid

  stage    Stage   // Fase do campeonato: GROUP, QUARTAS, SEMI, FINAL
  round    Int?    // Rodada opcional

  team1Id String @db.Uuid
  team2Id String @db.Uuid
  team1   Team   @relation("Team1Matches", fields: [team1Id], references: [id])
  team2   Team   @relation("Team2Matches", fields: [team2Id], references: [id])

  team1Score Int @default(0)
  team2Score Int @default(0)

  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  events MatchEvent[]
}

// -------------------------------------
model MatchEvent {
  id        String   @id @default(uuid()) @db.Uuid

  matchId   String   @db.Uuid
  playerId  String   @db.Uuid
  type      EventType

  match  Match  @relation(fields: [matchId], references: [id])
  player Player @relation(fields: [playerId], references: [id])
}

// --------------------------------------
enum Role {
  CAPITAO
  ADMIN
  JOGADOR
}

enum Position {
  GOLEIRO
  DEFENSOR
  MEIOCAMPO
  ATACANTE
}

enum Stage {
  GROUP
  QUARTAS
  SEMI
  FINAL
}

enum EventType {
  GOAL
  ASSIST
}
